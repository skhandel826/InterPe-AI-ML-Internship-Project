# -*- coding: utf-8 -*-
"""DiabetesPredictionml.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dDl7PHflrdnvnrMtIUyH0-joNCPNvKSD

Importing the Dependencies
"""

import numpy as np # it helps user to do oprations with array
import pandas as pd # it is used for data manupulation and analysis
# this library heps in ml projects -provide tools for ml and statistical modeling like clustering,classification
from sklearn.preprocessing import StandardScaler #standard scaler : it standardise the data value instandard value
from sklearn.model_selection import train_test_split #
from sklearn.ensemble import RandomForestClassifier #randow forest : it is the supervised ml model
from sklearn.metrics import accuracy_score # compute accuracy
from sklearn import svm

"""Data Collection and Analysis

PIMA Diabetes Dataset
"""

# loading the diabetes dataset to a pandas DataFrame
diabetes_dataset = pd.read_csv('/content/diabetes (1).csv')

# printing the first 5 rows of the dataset
diabetes_dataset.head()

# number of rows and Columns in this dataset
diabetes_dataset.shape

# getting the statistical measures of the data
diabetes_dataset.describe() #describing data

"""1.   count :tells how many are there in data set
2.   mean : mean value of all data
3.   std -standard deviation
4.   min - min value of data
5.   25% - 25 % value is less than that value
6.   man max value in data
"""

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean() #calc mean value for 0 and 1

# separating the data and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis=1) #dropping outcome coloum sand storing it in x
Y = diabetes_dataset['Outcome'] #storing it in y

print(X)

print(Y)

"""Data Standardization"""

scaler = StandardScaler() #standard scaler : it standardise the data value instandard value

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the Model

"""

dpml= svm.SVC(kernel='linear')

"""MODEL Evaluation

"""

dpml.fit(X_train, Y_train)

# # accuracy score on the training data
# X_train_prediction =dpml.predict(X_train)
# training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

# accuracy score on the training data
X_train_prediction = dpml.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

# # accuracy score on the testing data
# X_test_prediction = dbml.predict(X_test)
# test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

# accuracy score on the testing data
X_test_prediction =dpml.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

# dpml has not overloaded as Accuracy score on test in 0.77 on training data (overfeeding)
print('Accuracy score of the test data : ', test_data_accuracy)

"""Making a Predictive Model

"""

input_data = (4,183,65,35,0,33.6,0.627,55)

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction1 = dpml.predict(std_data)
print(prediction1)

if (prediction1[0] == 0):
  print('The person is not diabetic')
else:
  input_data=list(input_data)
  input_data[5]=21.7
  input_data=tuple(input_data)
  input_data_as_numpy_array = np.asarray(input_data)
  input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
  std_data = scaler.transform(input_data_reshaped)
  prediction1 = dpml.predict(std_data)
  if(prediction1[0]==0):
    print('The person is diabetic')
    print('If the BMI was within the healthy range 18.5 to 24.9.The chances of Diabetes would be greatly reduced')
  else:
    print('The person is diabetic')







